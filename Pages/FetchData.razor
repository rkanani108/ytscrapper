@page "/filter"
@using Syncfusion.Blazor.QueryBuilder
@using Syncfusion.Blazor.Grids
@inject HttpClient Http

<div class="container row">
    <div class="card col-md-6 col-sm-12">
        <div class="row card-header">
            <h5>Youtube Scanner</h5>
        </div>
        <div class="card-body pt-3">
            <div class="row pb-0">
                <div class="col-md-12 input-group col-sm-12">
                    Don't check this:<input @bind="isDetail" type="checkbox" class="form-control form-conrol-md" width="20px"/>
                    <input placeholder="Enter channel id" @bind="channelId" type="text" class="form-control form-control-md text-center">

                    <div class="input-group-append">
                        <button class="btn btn-md btn-info" @onclick="Run" type="button">
                            <i class="fa fa-floppy-o"></i> Sync
                        </button>

                        <span class="font-weight-bold"><img src="/loader.gif" class="@ccsStyle" style="height: 37px; margin-left: 10px;" /></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="col-lg-12 control-section mt-4 mb-4">
    <div class="content-wrapper">
        <div class="row">
          <SfQueryBuilder @ref="Querybuilder" TValue="VideoSnippet" DataSource="@DataSource" EnablePersistence="true">
                <QueryBuilderRule Condition="and" Rules="@ImportRules"></QueryBuilderRule>
                <QueryBuilderEvents TValue="VideoSnippet" Created="Created" RuleChanged="UpdateRule"></QueryBuilderEvents>
            
                <QueryBuilderColumns>
                    <QueryBuilderColumn Field="Id" Label="Video Id" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.String></QueryBuilderColumn>
                    <QueryBuilderColumn Field="title" Label="Video Title" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.String></QueryBuilderColumn>
                    <QueryBuilderColumn Field="playlistId" Label="Playlist Id" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.String></QueryBuilderColumn>
                    <QueryBuilderColumn Field="playlistName" Label="Playlist Name" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.String></QueryBuilderColumn>
                    <QueryBuilderColumn Field="status" Label="Privacy Status" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.String></QueryBuilderColumn>
                </QueryBuilderColumns>
            </SfQueryBuilder>
        </div>
    </div>
    </div>
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                <SfGrid ID="Grid" @ref="Grid"  AllowTextWrap="true" AllowResizing="true"  TValue="VideoSnippet" DataSource="@GridData" Toolbar="@(new List<string>() { "ColumnChooser","ExcelExport", "PdfExport", "Search" })" AllowPaging="true" EnablePersistence="true" AllowExcelExport="true" AllowPdfExport="true" AllowFiltering="true" ShowColumnChooser="true" AllowSorting="true">

                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                    <GridEvents Created="Created" TValue="VideoSnippet"></GridEvents>
                    <GridEvents OnToolbarClick="ToolbarClick" TValue="VideoSnippet"></GridEvents>

                    <GridPageSettings PageCount="10"></GridPageSettings>
                    <GridColumns>
                        <GridColumn Field=@nameof(VideoSnippet.Id) HeaderText="Video Id" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                        <GridColumn Field=@nameof(VideoSnippet.title) FilterSettings="@(new FilterSettings{ Operator = Operator.Contains })" HeaderText="Video Title" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(VideoSnippet.playlistId) HeaderText="Playlist Id" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                        <GridColumn Field=@nameof(VideoSnippet.playlistName) FilterSettings="@(new FilterSettings{ Operator = Operator.Contains })" HeaderText="Playlist Name" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(VideoSnippet.status) Visible="true" HeaderText="Privacy Status" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(VideoSnippet.publishAt) Visible="true" HeaderText="PublishAt" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(VideoSnippet.duration) Visible="true" HeaderText="Duration" Width="150"></GridColumn>


                        <GridColumn Field=@nameof(VideoSnippet.description) Visible="true" HeaderText="Description" Width="150"></GridColumn>

                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>

    @code {
        SfGrid<VideoSnippet> Grid;
        public void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
        {
            if (args.Item.Id == "Grid_pdfexport")
            {
                this.Grid.PdfExport();
            }
            if (args.Item.Id == "Grid_excelexport")
            {
                this.Grid.ExcelExport();
            }

        }


        List<RuleModel> Rules = new List<RuleModel>()
{
            new RuleModel { Label="title", Field="title", Type="String", Operator="equal", Value = "katha" },

    };

        SfQueryBuilder<VideoSnippet> Querybuilder;
        public IList<VideoSnippet> GridData { get; set; }
        public IEnumerable<VideoSnippet> DataSource { get; set; }


        string ccsStyle = "displayNone";
        string ccsExportStyle = "displayNone";
        private int currentCount = 0;


        private Root playlist = null;
        private Root videos = null;
        private List<Root> videoList = new List<Root>();
        protected string apiKey { get; set; } = "AIzaSyDlv05h9HxL7X3LAZmhlBxdXlz3oxsAWq8";
        protected string channelId { get; set; }
        protected bool isDetail { get; set; }
        


        public List<RuleModel> ImportRules = new List<RuleModel>()
{
        new RuleModel { Field = "title", Label = "Video Id",  Type = "String" },
        new RuleModel { Field = "playlistName",Operator="in", Label = "Playlist Name",  Type = "String" }
    };

        private void Created()
        {
            GridData = Querybuilder.GetFilteredRecords().ToList<VideoSnippet>();
        }
        private void UpdateRule(Syncfusion.Blazor.QueryBuilder.RuleChangeEventArgs args)
        {
            GridData = Querybuilder.GetFilteredRecords().ToList<VideoSnippet>();

            if (args.Type == "DeleteRule" && args.Rule.Rules.Count == 0)
            {
                //if (GridData.Count == 0)
                //    GridData = DataSource as IList<VideoSnippet>;
                GridData = DataSource as IList<VideoSnippet>;

            }



            StateHasChanged();
        }

        public List<string> Values = new List<string> { "True", "False" };

        protected override void OnInitialized()
        {
            DataSource = GridData as IEnumerable<VideoSnippet>;
        }

        private async Task Run()
        {
            ccsStyle = "displayBlock";
            // apiKey = "AIzaSyDlv05h9HxL7X3LAZmhlBxdXlz3oxsAWq8";
            // channelId = "UCQXWP4gEdEwlb6vodwrU75A";
            string playlistToken = "false";
            do
            {
                string playListUrl = "https://www.googleapis.com/youtube/v3/playlists?part=snippet&maxResults=50&channelId=" + channelId + "&key=" + apiKey;
                if (playlistToken != "false")
                    playListUrl = playListUrl + "&pageToken=" + playlistToken;
                playlistToken = "false";
                playlist = await Http.GetFromJsonAsync<Root>(playListUrl);
                playlistToken = playlist.nextPageToken == null ? "false" : playlist.nextPageToken;

                foreach (var p in playlist.items)
                {
                    if (true)//p.id == "PLHNUWAqhIXY2CuHC8xNsqGxm-C2b-Ha4A")
                    {
                        string videoPageToken = "false", videoUrl;

                        do
                        {
                            videoUrl = "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet,status,contentDetails&maxResults=50&playlistId=" + p.id + "&key=" + apiKey;
                            if (videoPageToken != "false")
                                videoUrl = videoUrl + "&pageToken=" + videoPageToken;

                            videoPageToken = "false";

                            videos = await Http.GetFromJsonAsync<Root>(videoUrl);
                            videos.playlistName = p.snippet.title;

                            videos.playlistId = p.id;
                            videoList.Add(videos);
                            videoPageToken = videos.nextPageToken == null ? "false" : videos.nextPageToken;

                        } while (videoPageToken != "false");
                    }
                }

            } while (playlistToken != "false");
            ccsStyle = "displayNone";

            GridData = new List<VideoSnippet>();
            VideoSnippet vs = null;
            if (playlist != null)
            {
                currentCount = 0;
                foreach (var v in videoList)
                {
                    foreach (var item in v.items)
                    {
                        vs = new VideoSnippet();

                        //vs.no = (++currentCount).ToString();
                        vs.playlistId = v.playlistId;
                        vs.playlistName = v.playlistName;

                        vs.Id = item.snippet.resourceId.videoId;
                        vs.title = item.snippet.title;
                        vs.status = item.status.privacyStatus;
                        vs.publishAt = item.snippet.publishedAt.ToString();
                        vs.description = item.snippet.description;
                        vs.duration = "";
                        if (isDetail)
                        {
                            var videoUrl = "https://www.googleapis.com/youtube/v3/videos?id=" + vs.Id + "&part=contentDetails&key=" + apiKey;
                            var result = await Http.GetFromJsonAsync<VideoRoot>(videoUrl);

                            vs.duration = result.items[0].contentDetails.duration;
                        }


                        GridData.Add(vs);
                    }
                }
            }

            DataSource = GridData as IEnumerable<VideoSnippet>;

        }


        public class VideoSnippet
        {

            public string Id { get; set; }
            public string title { get; set; }
            public string playlistId { get; set; }
            public string playlistName { get; set; }
            public string status { get; set; }
            public string publishAt { get; set; }
            public string duration { get; set; }
            public string description { get; set; }
        }


        #region classes
        public class Default
        {
            public string url { get; set; }
            public int width { get; set; }
            public int height { get; set; }
        }
        public class Medium
        {
            public string url { get; set; }
            public int width { get; set; }
            public int height { get; set; }
        }
        public class High
        {
            public string url { get; set; }
            public int width { get; set; }
            public int height { get; set; }
        }
        public class Standard
        {
            public string url { get; set; }
            public int width { get; set; }
            public int height { get; set; }
        }
        public class Maxres
        {
            public string url { get; set; }
            public int width { get; set; }
            public int height { get; set; }
        }
        public class Thumbnails
        {
            public Default @default { get; set; }
            public Medium medium { get; set; }
            public High high { get; set; }
            public Standard standard { get; set; }
            public Maxres maxres { get; set; }
        }
        public class ResourceId
        {
            public string kind { get; set; }
            public string videoId { get; set; }
        }
        public class Snippet
        {
            public DateTime? publishedAt { get; set; }
            public string channelId { get; set; }
            public string title { get; set; }
            public string description { get; set; }
            public Thumbnails thumbnails { get; set; }
            public string channelTitle { get; set; }
            public string playlistId { get; set; }
            public int? position { get; set; }
            public ResourceId resourceId { get; set; }
        }
        public class Status
        {
            public string privacyStatus { get; set; }
        }
        public class Item
        {
            public string kind { get; set; }
            public string etag { get; set; }
            public string id { get; set; }
            public Snippet snippet { get; set; }
            public Status status { get; set; }
        }
        public class PageInfo
        {
            public int totalResults { get; set; }
            public int resultsPerPage { get; set; }
        }
        public class Root
        {
            public string kind { get; set; }
            public string playlistId { get; set; }
            public string playlistName { get; set; }
            public string etag { get; set; }
            public string nextPageToken { get; set; }
            public List<Item> items { get; set; }
            public PageInfo pageInfo { get; set; }
        }
        #endregion


        #region videoDetail

        // Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(myJsonResponse); 
        public class ContentRating
        {
        }

        public class ContentDetails
        {
            public string duration { get; set; }
            public string dimension { get; set; }
            public string definition { get; set; }
            public string caption { get; set; }
            public bool licensedContent { get; set; }
            public ContentRating contentRating { get; set; }
            public string projection { get; set; }
        }

        public class VideoItem
        {
            public string kind { get; set; }
            public string etag { get; set; }
            public string id { get; set; }
            public ContentDetails contentDetails { get; set; }
        }

        public class VideoPageInfo
        {
            public int totalResults { get; set; }
            public int resultsPerPage { get; set; }
        }

        public class VideoRoot
        {
            public string kind { get; set; }
            public string etag { get; set; }
            public List<VideoItem> items { get; set; }
            public PageInfo pageInfo { get; set; }
        }



        #endregion
    }
